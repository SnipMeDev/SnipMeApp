// Autogenerated from Pigeon (v4.2.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import
import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

enum SnippetLanguageType {
  c,
  cpp,
  objective_c,
  c_sharp,
  java,
  bash,
  python,
  perl,
  ruby,
  swift,
  javascript,
  kotlin,
  coffeescript,
  rust,
  basic,
  clojure,
  css,
  dart,
  erlang,
  go,
  haskell,
  lisp,
  llvm,
  lua,
  matlab,
  ml,
  mumps,
  nemerle,
  pascal,
  r,
  rd,
  scala,
  sql,
  tex,
  vb,
  vhdl,
  tcl,
  xquery,
  yaml,
  markdown,
  json,
  xml,
  proto,
  regex,
  unknown,
}

enum SnippetFilterType {
  all,
  mine,
  shared,
}

enum ModelState {
  loading,
  loaded,
  error,
}

enum MainModelEvent {
  none,
  alert,
  logout,
}

class Snippet {
  Snippet({
    this.uuid,
    this.title,
    this.code,
    this.language,
  });

  String? uuid;
  String? title;
  SnippetCode? code;
  SnippetLanguage? language;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['uuid'] = uuid;
    pigeonMap['title'] = title;
    pigeonMap['code'] = code?.encode();
    pigeonMap['language'] = language?.encode();
    return pigeonMap;
  }

  static Snippet decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return Snippet(
      uuid: pigeonMap['uuid'] as String?,
      title: pigeonMap['title'] as String?,
      code: pigeonMap['code'] != null
          ? SnippetCode.decode(pigeonMap['code']!)
          : null,
      language: pigeonMap['language'] != null
          ? SnippetLanguage.decode(pigeonMap['language']!)
          : null,
    );
  }
}

class SnippetCode {
  SnippetCode({
    this.raw,
    this.tokens,
  });

  String? raw;
  List<SyntaxToken?>? tokens;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['raw'] = raw;
    pigeonMap['tokens'] = tokens;
    return pigeonMap;
  }

  static SnippetCode decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return SnippetCode(
      raw: pigeonMap['raw'] as String?,
      tokens: (pigeonMap['tokens'] as List<Object?>?)?.cast<SyntaxToken?>(),
    );
  }
}

class SyntaxToken {
  SyntaxToken({
    this.start,
    this.end,
    this.color,
  });

  int? start;
  int? end;
  int? color;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['start'] = start;
    pigeonMap['end'] = end;
    pigeonMap['color'] = color;
    return pigeonMap;
  }

  static SyntaxToken decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return SyntaxToken(
      start: pigeonMap['start'] as int?,
      end: pigeonMap['end'] as int?,
      color: pigeonMap['color'] as int?,
    );
  }
}

class SnippetLanguage {
  SnippetLanguage({
    this.raw,
    this.type,
  });

  String? raw;
  SnippetLanguageType? type;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['raw'] = raw;
    pigeonMap['type'] = type?.index;
    return pigeonMap;
  }

  static SnippetLanguage decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return SnippetLanguage(
      raw: pigeonMap['raw'] as String?,
      type: pigeonMap['type'] != null
          ? SnippetLanguageType.values[pigeonMap['type']! as int]
          : null,
    );
  }
}

class SnippetFilter {
  SnippetFilter({
    this.type,
  });

  SnippetFilterType? type;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['type'] = type?.index;
    return pigeonMap;
  }

  static SnippetFilter decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return SnippetFilter(
      type: pigeonMap['type'] != null
          ? SnippetFilterType.values[pigeonMap['type']! as int]
          : null,
    );
  }
}

class MainModelStateData {
  MainModelStateData({
    this.state,
    this.is_loading,
    this.data,
    this.error,
  });

  ModelState? state;
  bool? is_loading;
  List<Snippet?>? data;
  String? error;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['state'] = state?.index;
    pigeonMap['is_loading'] = is_loading;
    pigeonMap['data'] = data;
    pigeonMap['error'] = error;
    return pigeonMap;
  }

  static MainModelStateData decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return MainModelStateData(
      state: pigeonMap['state'] != null
          ? ModelState.values[pigeonMap['state']! as int]
          : null,
      is_loading: pigeonMap['is_loading'] as bool?,
      data: (pigeonMap['data'] as List<Object?>?)?.cast<Snippet?>(),
      error: pigeonMap['error'] as String?,
    );
  }
}

class MainModelEventData {
  MainModelEventData({
    this.event,
    this.message,
  });

  MainModelEvent? event;
  String? message;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['event'] = event?.index;
    pigeonMap['message'] = message;
    return pigeonMap;
  }

  static MainModelEventData decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return MainModelEventData(
      event: pigeonMap['event'] != null
          ? MainModelEvent.values[pigeonMap['event']! as int]
          : null,
      message: pigeonMap['message'] as String?,
    );
  }
}

class _MainModelApiCodec extends StandardMessageCodec{
  const _MainModelApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is MainModelEventData) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else 
    if (value is MainModelStateData) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else 
    if (value is Snippet) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else 
    if (value is SnippetCode) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else 
    if (value is SnippetFilter) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else 
    if (value is SnippetLanguage) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else 
    if (value is SyntaxToken) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    } else 
{
      super.writeValue(buffer, value);
    }
  }
  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:       
        return MainModelEventData.decode(readValue(buffer)!);
      
      case 129:       
        return MainModelStateData.decode(readValue(buffer)!);
      
      case 130:       
        return Snippet.decode(readValue(buffer)!);
      
      case 131:       
        return SnippetCode.decode(readValue(buffer)!);
      
      case 132:       
        return SnippetFilter.decode(readValue(buffer)!);
      
      case 133:       
        return SnippetLanguage.decode(readValue(buffer)!);
      
      case 134:       
        return SyntaxToken.decode(readValue(buffer)!);
      
      default:      
        return super.readValueOfType(type, buffer);
      
    }
  }
}

class MainModelApi {
  /// Constructor for [MainModelApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  MainModelApi({BinaryMessenger? binaryMessenger}) : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _MainModelApiCodec();

  Future<MainModelStateData> getState() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.MainModelApi.getState', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as MainModelStateData?)!;
    }
  }

  Future<MainModelEventData> getEvent() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.MainModelApi.getEvent', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as MainModelEventData?)!;
    }
  }

  Future<void> initState() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.MainModelApi.initState', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> loadNextPage() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.MainModelApi.loadNextPage', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> filter(SnippetFilter arg_filter) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.MainModelApi.filter', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_filter]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> logOut() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.MainModelApi.logOut', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> refreshSnippetUpdates() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.MainModelApi.refreshSnippetUpdates', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }
}
